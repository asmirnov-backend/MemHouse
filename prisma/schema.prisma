generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Mem {
  id            String        @id @default(uuid()) @db.Uuid
  text          String?       @db.VarChar(1024)
  createdUser   User?         @relation(name: "created", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?       @db.Uuid
  viewedUsers   User[]
  reactions     MemReaction[]
  rating        Rating?
  tags          Tag[]
  images        ImageMeta[]
}

model ImageMeta {
  id         String  @id @default(uuid())
  title      String  @db.VarChar(128)
  displayUrl String  @db.VarChar(256)
  width      Int
  height     Int
  size       Int
  originMeta Json    @db.JsonB()
  mem        Mem?    @relation(fields: [memId], references: [id], onDelete: Cascade)
  memId      String? @db.Uuid
}

model Tag {
  id    String @id @default(uuid()) @db.Uuid
  value String @unique @db.VarChar(64)
  mems  Mem[]
}

model MemReaction {
  mem    Mem             @relation(fields: [memId], references: [id], onDelete: Cascade)
  memId  String          @db.Uuid
  type   MemReactionType
  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String          @db.Uuid

  @@id([memId, userId, type])
}

enum MemReactionType {
  LIKE
  DISLIKE
}

model Rating {
  amount Float
  mem    Mem    @relation(fields: [memId], references: [id], onDelete: Cascade)
  memId  String @id @unique @db.Uuid
}

model User {
  id          String        @id @default(uuid()) @db.Uuid
  email       String        @unique @db.VarChar(128)
  password    String
  nickname    String        @unique @db.VarChar(64)
  name        String        @db.VarChar(128)
  surname     String        @db.VarChar(128)
  birthday    DateTime?     @db.Date
  createdMems Mem[]         @relation(name: "created")
  viewedMemes Mem[]
  wallet      Wallet[]
  reactions   MemReaction[]
}

model Wallet {
  id      String @id @default(uuid()) @db.Uuid
  balance Float  @default(0)
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @db.Uuid
}
