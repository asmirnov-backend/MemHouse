# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @extends on INTERFACE | OBJECT

directive @external on FIELD_DEFINITION | OBJECT

directive @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @key(fields: String!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT

directive @link(import: [link__Import], url: String!) on SCHEMA

directive @override(from: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @shareable on FIELD_DEFINITION | OBJECT

directive @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input GetMemsInput {
  skip: Int! = 0
  take: Int! = 10
}

type ImageModel {
  createdAt: DateTime!
  displayUrl: String!
  height: Int!
  id: String!
  memId: String
  size: Int!
  title: String!
  updatedAt: DateTime!
  width: Int!
}

input MemCreateInput {
  imgsBuffers: [String!]!
  tags: [String!]
  text: String
}

type MemFullModel {
  createdAt: DateTime!
  createdUserId: String
  dislikes: Int!
  id: String!
  images: [ImageModel!]!
  isCurrentUserHasSetDislike: Boolean!
  isCurrentUserHasSetLike: Boolean!
  likes: Int!
  rating: Float
  tags: [String!]!
  text: String
  updatedAt: DateTime!
}

input MemUpdateInput {
  id: String!
  tags: [String!]
  text: String
}

type Mutation {
  createMem(CreateMemInput: MemCreateInput!): MemFullModel!
  toggleDislike(ToggleReactionInputDto: ToggleReactionInputDto!): ToggleReactionOutputDto!
  toggleLike(ToggleReactionInputDto: ToggleReactionInputDto!): ToggleReactionOutputDto!
  updateMem(UpdateMemInput: MemUpdateInput!): MemFullModel!
}

type Query {
  getMemsCreatedByCurrentUser(GetMemsInput: GetMemsInput!): [MemFullModel!]!
  mems(GetMemsInput: GetMemsInput!): [MemFullModel!]!
}

input ToggleReactionInputDto {
  memId: String!
}

type ToggleReactionOutputDto {
  reactionAmount: Int!
}

scalar link__Import